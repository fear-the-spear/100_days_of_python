The Cursor
  So a cursor is also known as the mouse or pointer. If we were working in Excel 
  or Google Sheet, we would be using the cursor to add rows of data or
  edit or delete data, we also need a cursor to modify our SQLite database.

CRUD (Create, Read, Update, Delete)

- Create
    - A New Database
        from flask import Flask
        from flask_sqlalchemy import SQLAlchemy

        app = Flask(__name__)
        app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///<name of database>.db"
        db = SQLAlchemy()
        db.init_app(app)

    - A New Table
        class Book(db.Model):
            id = db.Column(db.Integer, primary_key=True)
            title = db.Column(db.String(250), unique=True, nullable=False)
            author = db.Column(db.String(250), nullable=False)
            rating = db.Column(db.Float, nullable=False)

        with app.app_context():
            db.create_all()

    - A New Record
        with app.app_context():
            new_book = Book(id=1, title="Harry Potter", author="J.K. Rowling, rating=9.3)
            db.session.add(new_book)
            db.session.commit()

      * When creating new records, the primary key fields is optional
        The id field will be auto-generated if omitted
- Read
    - ALL Records
        with app.app_context():
            result = db.session.execute(db.select(Book).order_by(Book.title))
            all_books = result.scalars()

      * To read all the records, we first need to create a "query" to select things
        from the database. When we execute a query during a database session we get
        back the rows in the database (a Result object). We then use scalars() to
        get the individual elements rather than entire rows.

    - A Particular Record By Query
        with app.app_context():
            book = db.session.execute(db.select(Book).where(Book.title == "Harry Potter")).scalar()

      * To get a single element we can use scalar() instead of scalars()

- Update
    - A Particular Record By Query
        with app.app_context():
            book_to_update = db.session.execute(db.select(Book).where(Book.title == "Harry Potter")).scalar()
            book_to_update.title = "Harry Potter and the Chamber of Secrets"
            db.session.commit()

    - A Record By PRIMARY KEY
        book_id = 1
        with app.app_context():
            book_to_update = db.session.execute(db.select(Book).where(Book.id == book_id)).scalar()
            # or book_to_update = db.get_or_404(Book, book_id)
            book_to_update.title = "Harry Potter and the Goblet of Fire"
            db.session.commit()

      * Flask-SQLAlchemy also has some handy extra query methods like
        'get_or_404()' that we can use. Since Flask-SQLAlchemy version 3.0,
        the previous query methods like 'Book.query.get()' have been deprecated.

- Delete
    - A Particular Record By PRIMARY KEY
        book_id = 1
        with app.app_context():
            book_to_delete = db.session.execute(db.select(Book).where (Book.id == book_id)).scalar()
            # or book_to_delete = db.get_or_404(Book, book_id)
            db.session.delete(book_to_delete)
            db.session.commit()

      * You can also delete by querying for a particular value e.g. by title or
        one of the other properties. Again, the 'get_or_404()' method is handy AF.